{"mappings":"AAAiB,EAAIA,EAAQC,WACnBC,EAAWD,GAAcE,SAEzBC,EAAYC,UACRC,EAAUH,SAASI,cAAa,QACtCD,EAAQE,aAAY,MAAM,cAC1BF,EAAQE,aAAY,OAASH,GAC7BF,SAASM,cAAa,QAASC,YAAYJ,IAUzCK,EAAUC,IACRA,EAAIC,QACJD,EAAIC,OAAOC,SAASC,IAChBX,EAAQ,GAAIQ,EAAIP,WAAWU,QAG/BH,EAAII,SACJJ,EAAII,QAAQF,SAASG,IAdd,CAAIZ,UACTC,EAAUH,SAASI,cAAa,UACtCD,EAAQE,aAAY,eAAgB,GACpCF,EAAQE,aAAY,MAAQH,GAC5BF,SAASM,cAAa,QAASC,YAAYJ,IAWnCY,CAAS,GAAIN,EAAIP,WAAWY,QAIpCL,EAAIO,QAAS,GAsBXC,EAAWC,MAAUf,sBACfgB,GAAgBhB,EAAQiB,QAC1BC,EAAQxB,EAAOyB,OAAOH,GAExBE,EAAME,MACNF,EAAME,KAAKZ,SAAOO,MAAQT,UAChBe,EAAY3B,EAAO0B,KAAKd,GACzBe,EAAUR,QACXR,EAAOgB,OAMdH,EAAML,QAAUK,EAAMX,QACvBT,EAAQ,GAAIoB,EAAMnB,WAAWmB,EAAMX,UAGvCW,EAAML,YArCEE,OAAUf,EAASkB,KAEvBA,EAAMR,UACDQ,EAAMI,SAEPJ,EAAMI,aAAeC,OAAM,GAAIL,EAAMnB,WAAWmB,EAAMR,YAGtDQ,EAAMI,QACNJ,EAAMI,OAAOE,QAAQxB,KAGtB,GAyBcyB,CAAOzB,EAASkB,IAcnCQ,EAAc,CAAIC,EAASC,KAC7BD,EAAQnB,SAASqB,IACTA,EAAMC,iBACNF,EAASG,UAAUF,EAAMG,QACzBlB,EAAYe,EAAMG,aASxBC,EAAQjC,UACJkC,EAAQlC,aAAmBmC,aAC3BC,EAASF,EAAQrC,SAASM,cAAa,QAAWH,EAElDqC,EAAO,CAAKC,WAAY5C,EAAO6C,QAAM,cACrCX,EAAQ,IAAOY,qBAAqBd,EAAgBW,GAE1DI,OAAOC,KAAKhD,EAAOyB,QAAQX,SAASmC,IACfP,EAAOQ,iBAAiBD,GAChCnC,SAASqC,IACdA,EAAG3C,aAAY,oBAAsByC,MAGmB,MAAnCE,EAAGC,UAAUD,EAAGC,UAAUC,OAAQ,GACvC,eACND,GAAcD,EACpBC,EAAYE,KAAKC,MAAM,GAAG,GAC1BJ,EAAGC,UAAS,SACNI,EAAaJ,EAAUK,MAAK,MAClCN,EAAGO,UAAUC,OAAOH,IAGnBhB,GAASxC,EAAO4D,MACjBxC,EAAY+B,GAEZjB,EAAS2B,QAAQV,UA6BjCnD,EAAOyB,OAAM,aAAY,CACrBN,QAAQ,EACRH,QAAO,GACPY,OAAM,CACFE,QAnBUT,MAAUyC,UAClBC,EAAOD,EAAWrD,cAAa,aAAcuD,YAC7CC,OAVS5C,OAAU0C,UACnBG,QAAaC,MAAK,GAAIJ,uBACxBG,EAAKE,GACEF,EAAKZ,OAET,MAKYe,CAAcN,GAC7BE,IACAH,EAAWQ,mBAAkB,YAAcL,GAC3CH,EAAWrD,cAAa,OAAQ8D,SAChCT,EAAWJ,UAAUC,IAAG,cACxBpB,EAAKuB,OAgBbvB,EAAKrC,IA+BTsE,CA5BY,CACR3B,OAAM,YACNpB,OAAM,QACM,CACJpB,SAAQ,kBACRQ,OAAM,aACNG,QAAO,2BAEC,CACRX,SAAQ,qBACRQ,OAAM,qBAEF,CACJR,SAAQ,kBACRQ,OAAM,mDAE0B,CAChCR,SAAQ,iBACRQ,OAAM,cACNG,QAAO,2BAEC,CACRX,SAAQ,qBACRQ,OAAM","sources":["js/scripts.js"],"sourcesContent":["const blockLoader = (config, suppliedEl) => {\n    const parentEl = suppliedEl || document;\n\n    const addStyle = (location) => {\n        const element = document.createElement('link');\n        element.setAttribute('rel', 'stylesheet');\n        element.setAttribute('href', location);\n        document.querySelector('head').appendChild(element);\n    };\n\n    const addScript = (location) => {\n        const element = document.createElement('script');\n        element.setAttribute('crossorigin', true);\n        element.setAttribute('src', location);\n        document.querySelector('head').appendChild(element);\n    };\n\n    const addDep = (dep) => {\n        if (dep.styles) {\n            dep.styles.forEach((style) => {\n                addStyle(`${dep.location}${style}`);\n            });\n        }\n        if (dep.scripts) {\n            dep.scripts.forEach((script) => {\n                addScript(`${dep.location}${script}`);\n            });\n        }\n        // eslint-disable-next-line no-param-reassign\n        dep.loaded = true;\n    };\n\n    const initJs = async (element, block) => {\n        // If the block scripts haven't been loaded, load them.\n        if (block.scripts) {\n            if (!block.module) {\n                /* eslint-disable-next-line */\n                block.module = await import(`${block.location}${block.scripts}`);\n            }\n            // If this block type has scripts and they're already loaded\n            if (block.module) {\n                block.module.default(element);\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Unlazy each type of block\n     * @param {HTMLElement} element\n     */\n    const loadElement = async (element) => {\n        const { blockSelect } = element.dataset;\n        const block = config.blocks[blockSelect];\n        // Load any block dependencies\n        if (block.deps) {\n            block.deps.forEach(async (dep) => {\n                const depConfig = config.deps[dep];\n                if (!depConfig.loaded) {\n                    addDep(depConfig);\n                }\n            });\n        }\n\n        // Inject CSS\n        if (!block.loaded && block.styles) {\n            addStyle(`${block.location}${block.styles}`);\n        }\n        // Run JS against element\n        block.loaded = await initJs(element, block);\n    };\n\n    const sanitizeClass = (element) => {\n        let { className } = element;\n        className = text.slice(0, -1);\n        return className.split('--');\n    };\n\n    /**\n     * Iterate through all entries to determine if they are intersecting.\n     * @param {IntersectionObserverEntry} entries\n     * @param {IntersectionObserver} observer\n     */\n    const onIntersection = (entries, observer) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n                observer.unobserve(entry.target);\n                loadElement(entry.target);\n            }\n        });\n    };\n\n    /**\n     * Lazily load blocks using an Intersection Observer.\n     * @param {HTMLElement} element\n     */\n    const init = (element) => {\n        const isDoc = element instanceof HTMLDocument;\n        const parent = isDoc ? document.querySelector('body') : element;\n\n        const options = { rootMargin: config.margin || '1000px 0px' };\n        const observer = new IntersectionObserver(onIntersection, options);\n\n        Object.keys(config.blocks).forEach((selector) => {\n            const elements = parent.querySelectorAll(selector);\n            elements.forEach((el) => {\n                el.setAttribute('data-block-select', selector);\n\n                // Assumes \"Marquee (Small, Contained)\" turns into \"marquee--small--contained-\"\n                const blockVariant = el.className[el.className.length -1] === '-';\n                if (blockVariant) {\n                    let { className } = el;\n                    className = text.slice(0, -1);\n                    el.className = '';\n                    const classNames = className.split('--');\n                    el.classList.add(...classNames);\n                }\n\n                if (!isDoc || config.eager) {\n                    loadElement(el);\n                } else {\n                    observer.observe(el);\n                }\n            });\n        });\n    };\n\n    const fetchFragment = async (path) => {\n        const resp = await fetch(`${path}.plain.html`);\n        if (resp.ok) {\n            return resp.text();\n        }\n        return null;\n    };\n\n    const loadFragment = async (fragmentEl) => {\n        const path = fragmentEl.querySelector('div > div').textContent;\n        const html = await fetchFragment(path);\n        if (html) {\n            fragmentEl.insertAdjacentHTML('beforeend', html);\n            fragmentEl.querySelector('div').remove();\n            fragmentEl.classList.add('is-Visible');\n            init(fragmentEl);\n        }\n    };\n\n    /**\n     * Add fragment to the list of blocks\n     */\n    // eslint-disable-next-line no-param-reassign\n    config.blocks['.fragment'] = {\n        loaded: true,\n        scripts: {},\n        module: {\n            default: loadFragment,\n        },\n    };\n\n    init(parentEl);\n};\n\nconst config = {\n    margin: '100px 0px',\n    blocks: {\n        'header': {\n            location: '/blocks/header/',\n            styles: 'styles.css',\n            scripts: 'scripts.js',\n        },\n        '.home-hero': {\n            location: '/blocks/home-hero/',\n            styles: 'styles.css',\n        },\n        'footer': {\n            location: '/blocks/footer/',\n            styles: 'styles.css',\n        },\n        'a[href^=\"https://www.youtube.com\"]': {\n            location: '/blocks/embed/',\n            styles: 'youtube.css',\n            scripts: 'youtube.js',\n        },\n        '.accordion': {\n            location: '/blocks/accordion/',\n            styles: 'styles.css',\n        }\n    },\n};\n\nblockLoader(config);"],"names":["config","suppliedEl","parentEl","document","addStyle","location","element","createElement","setAttribute","querySelector","appendChild","addDep","dep","styles","forEach","style","scripts","script","addScript","loaded","loadElement","async","blockSelect","dataset","block","blocks","deps","depConfig","module","import","default","initJs","onIntersection","entries","observer","entry","isIntersecting","unobserve","target","init","isDoc","HTMLDocument","parent","options","rootMargin","margin","IntersectionObserver","Object","keys","selector","querySelectorAll","el","className","length","text","slice","classNames","split","classList","add","eager","observe","fragmentEl","path","textContent","html","resp","fetch","ok","fetchFragment","insertAdjacentHTML","remove","$102c2a002d2f611c85706356583f081d$var$blockLoader"],"version":3,"file":"scripts.js.map"}